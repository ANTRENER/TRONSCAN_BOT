"use strict";
var __esDecorate = (this && this.__esDecorate) || function (ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) { if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected"); return f; }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
        var context = {};
        for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
        for (var p in contextIn.access) context.access[p] = contextIn.access[p];
        context.addInitializer = function (f) { if (done) throw new TypeError("Cannot add initializers after decoration has completed"); extraInitializers.push(accept(f || null)); };
        var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
        if (kind === "accessor") {
            if (result === void 0) continue;
            if (result === null || typeof result !== "object") throw new TypeError("Object expected");
            if (_ = accept(result.get)) descriptor.get = _;
            if (_ = accept(result.set)) descriptor.set = _;
            if (_ = accept(result.init)) initializers.unshift(_);
        }
        else if (_ = accept(result)) {
            if (kind === "field") initializers.unshift(_);
            else descriptor[key] = _;
        }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
};
var __runInitializers = (this && this.__runInitializers) || function (thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
        value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
};
var __setFunctionName = (this && this.__setFunctionName) || function (f, name, prefix) {
    if (typeof name === "symbol") name = name.description ? "[".concat(name.description, "]") : "";
    return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelegramService = void 0;
const common_1 = require("@nestjs/common");
const telegraf_1 = require("telegraf");
let TelegramService = (() => {
    let _classDecorators = [(0, common_1.Injectable)()];
    let _classDescriptor;
    let _classExtraInitializers = [];
    let _classThis;
    var TelegramService = _classThis = class {
        constructor(configService, walletService, tronService) {
            this.configService = configService;
            this.walletService = walletService;
            this.tronService = tronService;
            this.logger = new common_1.Logger(TelegramService.name);
            const token = this.configService.get('telegram.botToken');
            this.bot = new telegraf_1.Telegraf(token);
            this.setupCommands();
            // –î–ª—è Vercel –∏—Å–ø–æ–ª—å–∑—É–µ–º webhook –≤–º–µ—Å—Ç–æ polling
            if (process.env.VERCEL_URL) {
                const webhookUrl = `${process.env.VERCEL_URL}/api/telegram`;
                this.bot.telegram.setWebhook(webhookUrl);
                this.logger.log(`Telegram webhook set to: ${webhookUrl}`);
            }
            else {
                // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
                this.bot.launch();
                this.logger.log('Telegram bot started with polling');
            }
        }
        setupCommands() {
            this.bot.start((ctx) => {
                ctx.reply('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π TRON –∫–æ—à–µ–ª—å–∫–æ–≤.\n\n' +
                    '–ö–æ–º–∞–Ω–¥—ã:\n' +
                    '/add_wallet <–∞–¥—Ä–µ—Å> - –¥–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n' +
                    '/remove_wallet <–∞–¥—Ä–µ—Å> - —É–¥–∞–ª–∏—Ç—å –∫–æ—à–µ–ª–µ–∫\n' +
                    '/list_wallets - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤\n' +
                    '/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É');
            });
            this.bot.help((ctx) => {
                ctx.reply('–ö–æ–º–∞–Ω–¥—ã:\n' +
                    '/add_wallet <–∞–¥—Ä–µ—Å> - –¥–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n' +
                    '/remove_wallet <–∞–¥—Ä–µ—Å> - —É–¥–∞–ª–∏—Ç—å –∫–æ—à–µ–ª–µ–∫\n' +
                    '/list_wallets - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤\n' +
                    '/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É');
            });
            this.bot.command('add_wallet', async (ctx) => {
                const address = ctx.message.text.split(' ')[1];
                if (!address) {
                    ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: /add_wallet <–∞–¥—Ä–µ—Å>');
                    return;
                }
                if (!this.tronService.isValidTronAddress(address)) {
                    ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç TRON –∞–¥—Ä–µ—Å–∞. –ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å T –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 34 —Å–∏–º–≤–æ–ª–∞.');
                    return;
                }
                try {
                    const chatId = ctx.chat.id.toString();
                    await this.walletService.addWallet(address, chatId);
                    ctx.reply(`‚úÖ –ö–æ—à–µ–ª–µ–∫ ${address} –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞`);
                }
                catch (error) {
                    ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
                }
            });
            this.bot.command('remove_wallet', async (ctx) => {
                const address = ctx.message.text.split(' ')[1];
                if (!address) {
                    ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: /remove_wallet <–∞–¥—Ä–µ—Å>');
                    return;
                }
                try {
                    const chatId = ctx.chat.id.toString();
                    await this.walletService.removeWallet(address, chatId);
                    ctx.reply(`‚úÖ –ö–æ—à–µ–ª–µ–∫ ${address} —É–¥–∞–ª–µ–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞`);
                }
                catch (error) {
                    ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
                }
            });
            this.bot.command('list_wallets', async (ctx) => {
                try {
                    const chatId = ctx.chat.id.toString();
                    const wallets = await this.walletService.getWalletsByChatId(chatId);
                    if (wallets.length === 0) {
                        ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤');
                        return;
                    }
                    const walletList = wallets
                        .map(wallet => `‚Ä¢ ${wallet.address}`)
                        .join('\n');
                    ctx.reply(`üìã –í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–æ—à–µ–ª—å–∫–∏:\n${walletList}`);
                }
                catch (error) {
                    ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
                }
            });
        }
        async sendTransactionNotification(chatId, transaction) {
            const message = `üîî –ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è!\n\n` +
                `–ò—Å—Ö–æ–¥—è—â–∏–π –∫–æ—à–µ–ª–µ–∫: ${transaction.from}\n` +
                `–ö–æ–º—É: ${transaction.to}\n` +
                `–°—É–º–º–∞: ${transaction.amount} TRX\n` +
                `–ë–∞–ª–∞–Ω—Å: ${transaction.balance} TRX\n` +
                `–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${transaction.timestamp}\n\n` +
                `üîó [–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é](https://tronscan.org/#/transaction/${transaction.txHash})`;
            try {
                await this.bot.telegram.sendMessage(chatId, message, {
                    parse_mode: 'Markdown',
                });
            }
            catch (error) {
                this.logger.error(`Failed to send notification: ${error.message}`);
            }
        }
        getBotInfo() {
            return this.bot.telegram.getMe();
        }
        async stopBot() {
            await this.bot.stop();
        }
        // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook (–¥–ª—è Vercel)
        async handleWebhook(update) {
            await this.bot.handleUpdate(update);
        }
    };
    __setFunctionName(_classThis, "TelegramService");
    (() => {
        const _metadata = typeof Symbol === "function" && Symbol.metadata ? Object.create(null) : void 0;
        __esDecorate(null, _classDescriptor = { value: _classThis }, _classDecorators, { kind: "class", name: _classThis.name, metadata: _metadata }, null, _classExtraInitializers);
        TelegramService = _classThis = _classDescriptor.value;
        if (_metadata) Object.defineProperty(_classThis, Symbol.metadata, { enumerable: true, configurable: true, writable: true, value: _metadata });
        __runInitializers(_classThis, _classExtraInitializers);
    })();
    return TelegramService = _classThis;
})();
exports.TelegramService = TelegramService;
