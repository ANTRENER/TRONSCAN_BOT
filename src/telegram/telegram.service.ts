import { Injectable, Logger } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Telegraf } from 'telegraf';
import { WalletService } from '../database/services/wallet.service';
import { TronService } from '../tron/tron.service';

@Injectable()
export class TelegramService {
    private readonly logger = new Logger(TelegramService.name);
    private bot: Telegraf;

    constructor(
        private configService: ConfigService,
        private walletService: WalletService,
        private tronService: TronService,
    ) {
        const token = this.configService.get('telegram.botToken');
        this.bot = new Telegraf(token);

        this.setupCommands();

        // –î–ª—è Vercel –∏—Å–ø–æ–ª—å–∑—É–µ–º webhook –≤–º–µ—Å—Ç–æ polling
        if (process.env.VERCEL_URL) {
            const webhookUrl = `${process.env.VERCEL_URL}/api/telegram`;
            this.bot.telegram.setWebhook(webhookUrl);
            this.logger.log(`Telegram webhook set to: ${webhookUrl}`);
        } else {
            // –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
            this.bot.launch();
            this.logger.log('Telegram bot started with polling');
        }
    }

    private setupCommands() {
        this.bot.start((ctx) => {
            ctx.reply(
                '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π TRON –∫–æ—à–µ–ª—å–∫–æ–≤.\n\n' +
                '–ö–æ–º–∞–Ω–¥—ã:\n' +
                '/add_wallet <–∞–¥—Ä–µ—Å> - –¥–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n' +
                '/remove_wallet <–∞–¥—Ä–µ—Å> - —É–¥–∞–ª–∏—Ç—å –∫–æ—à–µ–ª–µ–∫\n' +
                '/list_wallets - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤\n' +
                '/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É'
            );
        });

        this.bot.help((ctx) => {
            ctx.reply(
                '–ö–æ–º–∞–Ω–¥—ã:\n' +
                '/add_wallet <–∞–¥—Ä–µ—Å> - –¥–æ–±–∞–≤–∏—Ç—å –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞\n' +
                '/remove_wallet <–∞–¥—Ä–µ—Å> - —É–¥–∞–ª–∏—Ç—å –∫–æ—à–µ–ª–µ–∫\n' +
                '/list_wallets - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤\n' +
                '/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É'
            );
        });

        this.bot.command('add_wallet', async (ctx) => {
            const address = ctx.message.text.split(' ')[1];
            if (!address) {
                ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: /add_wallet <–∞–¥—Ä–µ—Å>');
                return;
            }

            if (!this.tronService.isValidTronAddress(address)) {
                ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç TRON –∞–¥—Ä–µ—Å–∞. –ê–¥—Ä–µ—Å –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å T –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 34 —Å–∏–º–≤–æ–ª–∞.');
                return;
            }

            try {
                const chatId = ctx.chat.id.toString();
                await this.walletService.addWallet(address, chatId);
                ctx.reply(`‚úÖ –ö–æ—à–µ–ª–µ–∫ ${address} –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞`);
            } catch (error) {
                ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            }
        });

        this.bot.command('remove_wallet', async (ctx) => {
            const address = ctx.message.text.split(' ')[1];
            if (!address) {
                ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞: /remove_wallet <–∞–¥—Ä–µ—Å>');
                return;
            }

            try {
                const chatId = ctx.chat.id.toString();
                await this.walletService.removeWallet(address, chatId);
                ctx.reply(`‚úÖ –ö–æ—à–µ–ª–µ–∫ ${address} —É–¥–∞–ª–µ–Ω –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞`);
            } catch (error) {
                ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            }
        });

        this.bot.command('list_wallets', async (ctx) => {
            try {
                const chatId = ctx.chat.id.toString();
                const wallets = await this.walletService.getWalletsByChatId(chatId);

                if (wallets.length === 0) {
                    ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤');
                    return;
                }

                const walletList = wallets
                    .map(wallet => `‚Ä¢ ${wallet.address}`)
                    .join('\n');

                ctx.reply(`üìã –í–∞—à–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–æ—à–µ–ª—å–∫–∏:\n${walletList}`);
            } catch (error) {
                ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            }
        });
    }

    async sendTransactionNotification(
        chatId: string | number,
        transaction: {
            walletAddress: string;
            from: string;
            to: string;
            amount: string;
            balance: string;
            timestamp: string;
            txHash: string;
            direction: 'in' | 'out';
        }
    ) {
        const direction = transaction.direction === 'out' ? 'üî∫ –ò—Å—Ö–æ–¥—è—â–∏–π' : 'üîª –í—Ö–æ–¥—è—â–∏–π';
        const date = new Date(transaction.timestamp).toLocaleString('ru-RU', {
            year: 'numeric',
            month: '2-digit',
            day: '2-digit',
            hour: '2-digit',
            minute: '2-digit',
            second: '2-digit'
        });

        const message =
            `–ö–æ—à–µ–ª–µ–∫:\n` +
            `${transaction.walletAddress}\n` +
            `–ò—Å—Ö–æ–¥—è—â–∏–π üî∫/ –í—Ö–æ–¥—è—â–∏–π üîª\n` +
            `–ö–æ–º—É:\n` +
            `${transaction.to}\n\n` +
            `–°—É–º–º–∞: ${transaction.amount} USDT\n` +
            `–ë–∞–ª–∞–Ω—Å: ${transaction.balance} USDT\n\n` +
            `–î–∞—Ç–∞/–≤—Ä–µ–º—è: ${date}\n` +
            `üîó [–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é](https://tronscan.org/#/transaction/${transaction.txHash})`;

        try {
            await this.bot.telegram.sendMessage(chatId, message, {
                parse_mode: 'Markdown',
            });
        } catch (error) {
            this.logger.error(`Failed to send notification: ${error.message}`);
        }
    }

    getBotInfo() {
        return this.bot.telegram.getMe();
    }

    async stopBot() {
        await this.bot.stop();
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook (–¥–ª—è Vercel)
    async handleWebhook(update: any) {
        await this.bot.handleUpdate(update);
    }
}
